{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "eip712Domain",
				"outputs": [
					{
						"internalType": "bytes1",
						"name": "fields",
						"type": "bytes1"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "version",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "verifyingContract",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "uint256[]",
						"name": "extensions",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "getMessageHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"eip712Domain()": {
					"details": "See: https://eips.ethereum.org/EIPS/eip-5267"
				},
				"getMessageHash(bytes)": {
					"params": {
						"message": "Message that should be hashed."
					},
					"returns": {
						"_0": "The replay-safe message hash."
					}
				},
				"isValidSignature(bytes32,bytes)": {
					"details": "The signature is valid if it is signed by the owner's private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).",
					"params": {
						"hash": "Hash of the data to be signed.",
						"signature": "Signature byte array associated with the data."
					},
					"returns": {
						"_0": "Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`."
					}
				}
			},
			"stateVariables": {
				"_1271_MAGIC_VALUE_SUCCESS": {
					"details": "bytes4(keccak256(\"isValidSignature(bytes32,bytes)\"))"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getMessageHash(bytes)": {
					"notice": "Returns the replay-safe hash of a message that can be signed by owners."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/CordylineAccount_flattened.sol": "ERC1271"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": [
			":@openzeppelin/=src/external/openzeppelin-contracts/",
			":ds-test/=lib/forge-std/lib/ds-test/src/",
			":forge-std/=lib/forge-std/src/"
		]
	},
	"sources": {
		"src/CordylineAccount_flattened.sol": {
			"keccak256": "0x5033f0aef53ae73b2b21a1697e795a997d97ad9a3708742f30bbfd61d13096d5",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fb2ed4efa461c23823df289e50f22483feb92c5e4ab7b8518906e94f2d5f5273",
				"dweb:/ipfs/QmaErmKxzwKyCyCKjsG8SCiQVoufv4bPvk3oEnYRzENUES"
			]
		}
	},
	"version": 1
}